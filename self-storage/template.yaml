# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SAM Template for Serverless Patterns v1 - Data store

Globals:
  Function:
    Runtime: python3.9
    MemorySize: 128
    Timeout: 100
    Tracing: Active
    LoggingConfig:
      LogFormat: JSON

Parameters:
  UserPoolAdminGroupName:
    Description: User pool group name for API administrators 
    Type: String
    Default: apiAdmins

    
Resources:
  SUnitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-Unit
      AttributeDefinitions:
        - AttributeName: unitid
          AttributeType: S
        - AttributeName: Town
          AttributeType: S
        - AttributeName: Size
          AttributeType: S
        - AttributeName: Status
          AttributeType: S  
      KeySchema:
        - AttributeName: unitid
          KeyType: HASH   # Partition Key
      GlobalSecondaryIndexes:
        - IndexName: SizeIndex
          KeySchema:
            - AttributeName: Size
              KeyType: HASH  # HASH key should be the first element
            - AttributeName: unitid
              KeyType: RANGE  # Make unitid the RANGE key for the GSI
          Projection:
            ProjectionType: ALL
        - IndexName: StatusIndex
          KeySchema:
            - AttributeName: Status
              KeyType: HASH  # HASH key should be the first element
            - AttributeName: unitid
              KeyType: RANGE  # Make unitid the RANGE key for the GSI
          Projection:
            ProjectionType: ALL    
        - IndexName: TownIndex
          KeySchema:
            - AttributeName: Town
              KeyType: HASH  # HASH key should be the first element
            - AttributeName: unitid
              KeyType: RANGE  # Make unitid the RANGE key for the GSI
          Projection:
            ProjectionType: ALL    
      BillingMode: PAY_PER_REQUEST


  ViewUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: storage_units/src/api
      Handler: view_units.lambda_handler
      Runtime: python3.9
      Tracing: Active
      Policies:
        DynamoDBReadPolicy:
          TableName: !Ref SUnitTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SUnitTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /storage_units
            Method: get
            RestApiId: !Ref RestAPI  
            Auth:
              Authorizer: NONE  # No authentication required


  BookUnitsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: storage_units/src/api
      Handler: book_units.lambda_handler
      Runtime: python3.9
      Tracing: Active
      Policies:
        DynamoDBReadPolicy:
          TableName: !Ref SUnitTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SUnitTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /storage_units/{unitid}
            Method: put
            RestApiId: !Ref RestAPI
            Auth:
              Authorizer: NONE     


  CancelRentalFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: storage_units/src/api
      Handler: cancel_units.lambda_handler
      Runtime: python3.9
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref SUnitTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SUnitTable
      Events:
        CancelRental:
          Type: Api
          Properties:
            Path: /storage_units/{unitid}/cancel
            Method: post
            RestApiId: !Ref RestAPI  
            Auth:
              Authorizer: NONE   


  ManageUnitStatusFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: storage_units/src/api
      Handler: manage_unit_status.lambda_handler
      Runtime: python3.9
      Tracing: Active
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref SUnitTable
      Environment:
        Variables:
          TABLE_NAME: !Ref SUnitTable
      Events:
        GetUnitStatus:
          Type: Api
          Properties:
            Path: /storage_units/status/{status}
            Method: get
            RestApiId: !Ref RestAPI
            Auth:
              Authorizer: NONE 
        UpdateUnitStatus:
          Type: Api
          Properties:
            Path: /storage_units/{unitid}/status/{status}
            Method: put
            RestApiId: !Ref RestAPI
            Auth:
              Authorizer: NONE  


  PostConfirmationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: cognito_auth/post_confirmation.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: PostConfirmationLambdaFunction
      Code:
        S3Bucket: macrosoft-capstone-storage
        S3Key: code/post_confirmation.zip
      Runtime: python3.9
      MemorySize: 128
      Timeout: 5


  AuthorizerFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cognito_auth/authorize.lambda_handler
      Description: Handler for Lambda authorizer
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPool
          APPLICATION_CLIENT_ID: !Ref UserPoolClient
          ADMIN_GROUP_NAME: !Ref UserPoolAdminGroupName
      Tags:
        Stack: !Sub "${AWS::StackName}"

  ValidateAuthTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: cognito_auth/validate_auth_token.lambda_handler
      Runtime: python3.9
      Environment:
        Variables:
          USER_POOL_ID: !Ref UserPoolId
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:GetUser
                - cognito-idp:AdminListGroupsForUser
              Resource: "*"
      Events:
        ValidateAuthTokenApi:
          Type: Api
          Properties:
            Path: /validateAuthToken
            Method: post

  RestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      TracingEnabled: true
      Tags:
        Name: !Sub "${AWS::StackName}-API"
        Stack: !Sub "${AWS::StackName}" 
      Auth:
        DefaultAuthorizer: LambdaTokenAuthorizer
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            Identity:
              Headers:
                - Authorization
                  
  Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow 
                Action:
                  - s3:ListBucket
                  - s3:GetObject
                  - lambda:InvokeFunction
                Resource: '*'      

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoPostConfirmationPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "cognito-idp:AdminAddUserToGroup"
                Resource: "*"  

  ApiAdministratorsUserPoolGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      Description: User group for API Administrators
      GroupName: !Ref UserPoolAdminGroupName
      Precedence: 0
      UserPoolId: !Ref UserPool

  # Users Group
  TenantsUsersGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties:
      UserPoolId: !Ref UserPool
      GroupName: TenantsUsersGroup
      Description: "Group for general application users"
      Precedence: 2 
             

Outputs:
  StoreUnitTable:
      Description: DynamoDB Units table
      Value: !Ref SUnitTable

  APIEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/Prod"    


  UserPool:
    Description: Cognito User Pool ID
    Value: !Ref UserPool

  UserPoolClient:
    Description: Cognito User Pool Application Client ID
    Value: !Ref UserPoolClient

  UserPoolAdminGroupName:
    Description: User Pool group name for API administrators
    Value: !Ref UserPoolAdminGroupName
  
  CognitoLoginURL:
    Description: Cognito User Pool Application Client Hosted Login UI URL
    Value: !Sub 'https://${UserPoolClient}.auth.${AWS::Region}.amazoncognito.com/login?client_id=${UserPoolClient}&response_type=code&redirect_uri=http://localhost'

  CognitoAuthCommand:
    Description: AWS CLI command for Amazon Cognito User Pool authentication
    Value: !Sub 'aws cognito-idp initiate-auth --auth-flow USER_PASSWORD_AUTH --client-id ${UserPoolClient} --auth-parameters USERNAME=<user@example.com>,PASSWORD=<password> --query "AuthenticationResult.IdToken" --output text'